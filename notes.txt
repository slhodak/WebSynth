WebSynth

Browser-based synthesizer

Goals:
  Modularity and flexibility
  A friction-minimal UI that rewards spontaneity and creativity
    - Hotkey-drive synth adjustments
      - Hotkey chords
        (maybe need an abstraction/helper function to help create chord event handlers?)

Architecture:
  - Router as a class doesn't make much sense since only one exists
    - Pro: It does help code readability to have Synthesizer be less huge
    - Con: It doesn't really make sense, but then again neither does Synth
      - Nah synth as a class makes some sense. And router and synth shouldn't require each other. Synth can exist without the router.
  - Why is Synth a class?
    - Because it needs to be an object with methods and properties
    - But it doesn't need to be created more than once, so it could just be an object with methods and properties
      - Yeah but *what if* I did want more than one? Huh? What then?
      - It just feels like a logical repository of all the synth goodies and probably even keeps me from letting things which are *Not Model* creep into that Model space
        - The router, on the other hand... seems less justifiable as not being part of the synth.
          - Could you have a synth without a router? Sure you could. So there.

Next:
  - Add support for mono/poly
    - Polyphony button toggles Poly Mode
      - Poly depends on Voices
        - A voice is almost the entire synthesizer to this point
        - Notes are started by creating new sets of oscillators, not simply adjusting old ones' volumes
        - Notes are ended by destroying/releasing old sets of oscillators
  - Mono default legato w/trill (done with room for cleaner refactor)
  - Add velocity sensitivity
    - With slider

  -Voices
    - Oscillators from Synthesizer (archetypes) all cloned
    OR
    - Oscillators sending multiple streams of audio... not possible
    
    - Oscillators created on noteOn from synth archetypes
      - wow sounds like an expensive operation. Deep cloning? Latency?
        - Deep cloning actually not desired?
      - Oscillators all must be separate OscillatorNodes but refer to the same MasterGain

TODO: 
  - 

Issues:
  - Changes to the list of oscillators won't take effect until a new note is voiced

Done: 
  - Re-implement legato alongside poly option
  - Connect oscillator voices to filter
  - Fix disconnect timing (done but investigate a debouncer or something)
  - Moving iterating controller setting functions to iterating synthesizer setting functions


Journal:
  - Save Presets?
    - Would need a well-defined model data shape in order to save data that will be useful after extensions to the synthesizer properties. Distortion nodes, custom waves, etc, would need to be accounted for as much as possible in an early setup. Alternatively consider a schema that would at least lend itself to later being massaged while migrated into a new db reflecting an updated synth design.
      - In general, it would be best to wait for this. But interesting question about an evolving, potentially open-source project allowing itself to be backward-compatible.
